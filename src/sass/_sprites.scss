/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$cloud-white-small-name: 'cloud-white-small';
$cloud-white-small-x: 856px;
$cloud-white-small-y: 257px;
$cloud-white-small-offset-x: -856px;
$cloud-white-small-offset-y: -257px;
$cloud-white-small-width: 256px;
$cloud-white-small-height: 102px;
$cloud-white-small-total-width: 1500px;
$cloud-white-small-total-height: 636px;
$cloud-white-small-image: '../images/sprite.png';
$cloud-white-small: (856px, 257px, -856px, -257px, 256px, 102px, 1500px, 636px, '../images/sprite.png', 'cloud-white-small', );
$cloud-white-name: 'cloud-white';
$cloud-white-x: 0px;
$cloud-white-y: 257px;
$cloud-white-offset-x: 0px;
$cloud-white-offset-y: -257px;
$cloud-white-width: 543px;
$cloud-white-height: 217px;
$cloud-white-total-width: 1500px;
$cloud-white-total-height: 636px;
$cloud-white-image: '../images/sprite.png';
$cloud-white: (0px, 257px, 0px, -257px, 543px, 217px, 1500px, 636px, '../images/sprite.png', 'cloud-white', );
$clouds-name: 'clouds';
$clouds-x: 0px;
$clouds-y: 0px;
$clouds-offset-x: 0px;
$clouds-offset-y: 0px;
$clouds-width: 1500px;
$clouds-height: 257px;
$clouds-total-width: 1500px;
$clouds-total-height: 636px;
$clouds-image: '../images/sprite.png';
$clouds: (0px, 0px, 0px, 0px, 1500px, 257px, 1500px, 636px, '../images/sprite.png', 'clouds', );
$logos-name: 'logos';
$logos-x: 543px;
$logos-y: 257px;
$logos-offset-x: -543px;
$logos-offset-y: -257px;
$logos-width: 313px;
$logos-height: 158px;
$logos-total-width: 1500px;
$logos-total-height: 636px;
$logos-image: '../images/sprite.png';
$logos: (543px, 257px, -543px, -257px, 313px, 158px, 1500px, 636px, '../images/sprite.png', 'logos', );
$logotype-name: 'logotype';
$logotype-x: 1239px;
$logotype-y: 257px;
$logotype-offset-x: -1239px;
$logotype-offset-y: -257px;
$logotype-width: 148px;
$logotype-height: 52px;
$logotype-total-width: 1500px;
$logotype-total-height: 636px;
$logotype-image: '../images/sprite.png';
$logotype: (1239px, 257px, -1239px, -257px, 148px, 52px, 1500px, 636px, '../images/sprite.png', 'logotype', );
$pinguin-name: 'pinguin';
$pinguin-x: 0px;
$pinguin-y: 474px;
$pinguin-offset-x: 0px;
$pinguin-offset-y: -474px;
$pinguin-width: 112px;
$pinguin-height: 162px;
$pinguin-total-width: 1500px;
$pinguin-total-height: 636px;
$pinguin-image: '../images/sprite.png';
$pinguin: (0px, 474px, 0px, -474px, 112px, 162px, 1500px, 636px, '../images/sprite.png', 'pinguin', );
$play-name: 'play';
$play-x: 1112px;
$play-y: 257px;
$play-offset-x: -1112px;
$play-offset-y: -257px;
$play-width: 127px;
$play-height: 90px;
$play-total-width: 1500px;
$play-total-height: 636px;
$play-image: '../images/sprite.png';
$play: (1112px, 257px, -1112px, -257px, 127px, 90px, 1500px, 636px, '../images/sprite.png', 'play', );
$snail-name: 'snail';
$snail-x: 112px;
$snail-y: 474px;
$snail-offset-x: -112px;
$snail-offset-y: -474px;
$snail-width: 78px;
$snail-height: 73px;
$snail-total-width: 1500px;
$snail-total-height: 636px;
$snail-image: '../images/sprite.png';
$snail: (112px, 474px, -112px, -474px, 78px, 73px, 1500px, 636px, '../images/sprite.png', 'snail', );
$spritesheet-width: 1500px;
$spritesheet-height: 636px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($cloud-white-small, $cloud-white, $clouds, $logos, $logotype, $pinguin, $play, $snail, );
$spritesheet: (1500px, 636px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
